print("Hello World!")
print("Hello, World!")
setwd("C:/Users/Deepa Manu/Machine Learning A-Z/Part 4 - Clustering/Section 24 - K-Means Clustering")
setwd("C:/Users/Deepa Manu/Machine Learning A-Z/Part 4 - Clustering/Section 24 - K-Means Clustering")
# Importing the dataset
dataset = read.csv('Mall_Customers.csv')
dataset = dataset[4:5]
set.seed(6)
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(dataset, i)$withinss)
plot(1:10,
wcss,
type = 'b',
main = paste('The Elbow Method'),
xlab = 'Number of clusters',
ylab = 'WCSS')
set.seed(29)
kmeans = kmeans(x = dataset, centers = 5, iter.max = 300, nstart = 10)
set.seed(29)
kmeans = kmeans(x = dataset, centers = 5, iter.max = 300, nstart = 10)
y_kmeans = kmeans$cluster
# Visualising the clusters
library(cluster)
clusplot(dataset,
y_kmeans,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of customers'),
xlab = 'Annual Income',
ylab = 'Spending Score')
setwd("C:/Users/Deepa Manu/Machine Learning A-Z/Part 4 - Clustering/Section 25 - Hierarchical Clustering")
setwd("C:/Users/Deepa Manu/Machine Learning A-Z/Part 4 - Clustering/Section 25 - Hierarchical Clustering")
# Importing the dataset
dataset = read.csv('Mall_Customers.csv')
dataset = dataset[4:5]
dendrogram = hclust(d = dist(dataset, method = 'euclidean'), method = 'ward.D')
plot(dendrogram,
main = paste('Dendrogram'),
xlab = 'Customers',
ylab = 'Euclidean distances')
# Fitting Hierarchical Clustering to the dataset
hc = hclust(d = dist(dataset, method = 'euclidean'), method = 'ward.D')
y_hc = cutree(hc, 5)
# Visualising the clusters
library(cluster)
clusplot(dataset,
y_hc,
lines = 0,
shade = TRUE,
color = TRUE,
labels= 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of customers'),
xlab = 'Annual Income',
ylab = 'Spending Score')
setwd("C:/Users/Deepa Manu/Machine Learning A-Z/Part 5 - Association Rule Learning/Section 28 - Apriori")
setwd("C:/Users/Deepa Manu/Machine Learning A-Z/Part 5 - Association Rule Learning/Section 28 - Apriori")
install.packages('arules')
library(arules)
dataset = read.csv('Market_Basket_Optimisation.csv', header = FALSE)
dataset = read.transactions('Market_Basket_Optimisation.csv', sep = ',', rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 10)
# Training Apriori on the dataset
rules = apriori(data = dataset, parameter = list(support = 0.004, confidence = 0.2))
3*7/7500
4*7/7500
rules = apriori(data = dataset, parameter = list(support = 0.004, confidence = 0.2))
# Visualising the results
inspect(sort(rules, by = 'lift')[1:10])
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.2))
inspect(sort(rules, by = 'lift')[1:10])
rules = apriori(data = dataset, parameter = list(support = 0.004, confidence = 0.2))
# Visualising the results
inspect(sort(rules, by = 'lift')[1:10])
setwd("C:/Users/Deepa Manu/Machine Learning A-Z/Part 5 - Association Rule Learning/Section 29 - Eclat")
setwd("C:/Users/Deepa Manu/Machine Learning A-Z/Part 5 - Association Rule Learning/Section 29 - Eclat")
setwd("C:/Users/Deepa Manu/Machine Learning A-Z/Part 5 - Association Rule Learning/Section 29 - Eclat")
# Data Preprocessing
# install.packages('arules')
library(arules)
dataset = read.csv('Market_Basket_Optimisation.csv')
dataset = read.transactions('Market_Basket_Optimisation.csv', sep = ',', rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 10)
setwd("C:/Users/Deepa Manu/Machine Learning A-Z/Part 5 - Association Rule Learning/Section 29 - Eclat")
# Data Preprocessing
# install.packages('arules')
library(arules)
dataset = read.csv('Market_Basket_Optimisation.csv')
dataset = read.transactions('Market_Basket_Optimisation.csv', sep = ',', rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 10)
rules = eclat(data = dataset, parameter = list(support = 0.003, minlen = 2))
rules = eclat(data = dataset, parameter = list(support = 0.004, minlen = 2))
inspect(sort(rules, by = 'support')[1:10])
rules = eclat(data = dataset, parameter = list(support = 0.003, minlen = 2))
inspect(sort(rules, by = 'support')[1:10])
